<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd 
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
    <!-- 自动扫描 -->
    <context:component-scan base-package="sunwou"  />

    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"/>
    </bean>
    
    <!-- 异常处理，返回json结果 -->
   <!--  <bean id="exceptionResolver" class="sunwou.exception.ExceptionResolver"></bean> -->

    <!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">

        <property name="driverClassName" value="${jdbc.driverClassName}"/>

        <property name="url" value="${jdbc.url}"/>

        <property name="username" value="${jdbc.username}"/>

        <property name="password" value="${jdbc.password}"/>

        <property name="filters" value="stat"/>

        <property name="maxActive" value="${jdbc.maxActive}"/>

        <property name="initialSize" value="${jdbc.initialSize}"/>

        <property name="maxWait" value="${jdbc.maxWait}"/>

        <property name="minIdle" value="${jdbc.minIdle}"/>

        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>

        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="${jdbc.validationQuery}"/>

        <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>

        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>

        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>

        <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}"/>

        <property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>

        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>

        <property name="logAbandoned" value="${jdbc.logAbandoned}"/>

    </bean> -->
    
    <!-- druid -->
     <!-- <bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter"> 
  		<property name="statementExecutableSqlLogEnable" value="false" /> 
 	 </bean> -->

    <!-- 配置mybatis的sqlSessionFactory -->
    <!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:sunwou/mybatis/daoimple/*.xml"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean> -->

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
   <!--  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="sunwou.mybatis.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean> -->
    
    <!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean> -->

   <!--  <tx:annotation-driven transaction-manager="transactionManager"/> -->

    <!--  开启这个配置，spring才能识别@Scheduled注解     -->  
    <task:annotation-driven  scheduler="qbScheduler" mode="proxy"/>    
     <task:scheduler  id="qbScheduler" pool-size="10"/>   

     <import resource="mongo.xml"/>
     <import resource="spring-dubbo-config.xml"/> 

</beans>